func UpdateProfilePicture(c *fiber.Ctx) error {
	cookie := c.Cookies("jwt")
	token, err := jwt.ParseWithClaims(cookie, &jwt.StandardClaims{}, func(token *jwt.Token) (interface{}, error) {
		return []byte(JWTSecret), nil
	})
	if err != nil {
		c.Status(fiber.StatusUnauthorized)
		return c.JSON(fiber.Map{
			"message": "Unauthenticated",
		})
	}
	claims := token.Claims.(*jwt.StandardClaims)

	var user models.User
	database.DB.Where("id = ?", claims.Issuer).First(&user)
	if user.ID == 0 {
		c.Status(fiber.StatusUnauthorized)
		return c.JSON(fiber.Map{
			"message": "Unauthenticated",
		})
	}

	file, err := c.FormFile("profile_picture")
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"message": err.Error(),
		})
	}
	//defer file.Close()

	fileName := "user-id-" + strconv.FormatUint(uint64(user.ID), 10) + "-*.jpg"
	filePath := filepath.Join("profile_pictures", fileName)

	// check if file exists
	files, err := filepath.Glob(filePath)

	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"message": err.Error(),
		})
	}

	// delete file if it exists
	for _, f := range files {
		err = os.Remove(f)
		if err != nil {
			c.Status(fiber.StatusBadRequest)
			return c.JSON(fiber.Map{
				"message": err.Error(),
			})
		}
	}

	// upload picture
	// to store it in the directory temporary:
	tempFile, err2 := ioutil.TempFile("profile_pictures", "user-id-"+strconv.FormatUint(uint64(user.ID), 10)+"-*.jpg")

	if err2 != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"message": err2.Error(),
		})
	}
	defer tempFile.Close()

	fileBytes, err3 := file.Open()
	if err3 != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"message": err3.Error(),
		})
	}
	defer fileBytes.Close()

	fileBytesBytes, err4 := ioutil.ReadAll(fileBytes)
	if err4 != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"message": err4.Error(),
		})
	}
	tempFile.Write(fileBytesBytes)

	err5 := database.DB.Model(&user).Update("picture_url", tempFile.Name())

	if err5.Error != nil {
		return c.JSON(fiber.Map{
			"message": err5.Error,
		})
	}
	return c.JSON(fiber.Map{
		"message": "success",
	})
}
func GetProfilePicture(c *fiber.Ctx) error {
	id := c.Params("id")
	var user models.User
	database.DB.Where("id = ?", id).First(&user)
	if user.ID == 0 {
		c.Status(fiber.StatusNotFound)
		return c.JSON(fiber.Map{
			"message": "User Not Found",
		})
	}

	// check if file exists
	files, err := filepath.Glob(user.PictureURL)
	if err != nil {
		c.Status(fiber.StatusBadRequest)
		return c.JSON(fiber.Map{
			"message": err.Error(),
		})
	}

	if len(files) == 0 {
		// return a default picture or an error message
		c.Status(fiber.StatusNotFound)
		return c.JSON(fiber.Map{
			"message": "Profile Picture Not Found",
		})
	}

	// return the first file that matches the pattern
	return c.SendFile(files[0])
}
